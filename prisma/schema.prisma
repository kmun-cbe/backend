generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  userId            String    @unique // Custom KMUN25XXX format
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  role              String    @default("DELEGATE")
  isActive          Boolean   @default(true)
  lastLogin         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Delegate specific fields
  school            String?
  grade             String?
  experience        String?
  emergencyContact  String?
  dietaryReqs       String?
  
  // Registration
  registrations     Registration[]
  registrationForms RegistrationForm[]
  
  // Check-in/out
  checkIns          CheckIn[]
  
  // Attendance
  attendanceRecords AttendanceRecord[]
  
  // Marks (for delegates)
  marks             Mark[]
  
  // Payments
  payments          Payment[]
  
  @@map("users")
}

model Committee {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  type            String   // GA, SC, etc.
  institutionType String   // school, college, or both
  capacity        Int      @default(0) // Number of portfolios under this committee
  logo            String?  // Logo file path
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  portfolios    Portfolio[]
  registrations Registration[]
  sessions      Session[]
  
  @@map("committees")
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  committeeId String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  committee     Committee      @relation(fields: [committeeId], references: [id])
  registrations Registration[]
  
  @@map("portfolios")
}

model RegistrationForm {
  id                    String   @id @default(cuid())
  userId                String
  firstName             String
  lastName              String
  email                 String
  phone                 String
  gender                String
  isKumaraguru          Boolean
  rollNumber            String?
  institutionType       String?
  institution           String?
  cityOfInstitution     String?
  stateOfInstitution    String?
  grade                 String?
  totalMuns             Int
  requiresAccommodation Boolean  @default(false)
  committeePreference1  String
  portfolioPreference1  String
  committeePreference2  String
  portfolioPreference2  String
  committeePreference3  String
  portfolioPreference3  String
  idDocument            String
  munResume             String?
  status                String   @default("PENDING")
  submittedAt           DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("registration_forms")
}

model Registration {
  id          String            @id @default(cuid())
  userId      String
  committeeId String
  portfolioId String?
  status      String @default("PENDING")
  paymentStatus String   @default("PENDING")
  amount      Float
  allocatedCommittee String?
  allocatedPortfolio String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  user      User       @relation(fields: [userId], references: [id])
  committee Committee  @relation(fields: [committeeId], references: [id])
  portfolio Portfolio? @relation(fields: [portfolioId], references: [id])
  payments  Payment[]
  
  @@unique([userId, committeeId])
  @@map("registrations")
}

model CheckIn {
  id        String    @id @default(cuid())
  userId    String
  checkInAt DateTime  @default(now())
  checkOutAt DateTime?
  kitGiven  Boolean   @default(false)
  kitReturned Boolean @default(false)
  notes     String?
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("check_ins")
}

model Session {
  id          String   @id @default(cuid())
  committeeId String
  name        String
  date        DateTime
  startTime   String
  endTime     String
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  committee         Committee          @relation(fields: [committeeId], references: [id])
  attendanceRecords AttendanceRecord[]
  
  @@map("sessions")
}

model AttendanceRecord {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  status    String @default("ABSENT")
  markedAt  DateTime @default(now())
  notes     String?
  
  user    User    @relation(fields: [userId], references: [id])
  session Session @relation(fields: [sessionId], references: [id])
  
  @@unique([userId, sessionId])
  @@map("attendance_records")
}

model Mark {
  id        String   @id @default(cuid())
  userId    String
  category  String   // "Research", "Speaking", "Diplomacy", etc.
  score     Float
  maxScore  Float    @default(100)
  feedback  String?
  gradedBy  String   // User ID of grader
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("marks")
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  status      String   @default("pending") // pending, resolved, archived
  submittedAt DateTime @default(now())
  resolvedAt  DateTime?
  notes       String?
  
  @@map("contacts")
}

model Pricing {
  id               String   @id @default(cuid())
  internalDelegate Float    @default(2500)
  externalDelegate Float    @default(3500)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("pricing")
}

model Popup {
  id        String   @id @default(cuid())
  heading   String
  text      String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("popups")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  registrationId  String
  amount          Float
  currency        String        @default("INR")
  paymentMethod   String        @default("razorpay")
  status          String @default("PENDING")
  razorpayOrderId String?
  razorpayPaymentId String?
  razorpaySignature String?
  transactionId   String?
  paymentLink     String?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user User @relation(fields: [userId], references: [id])
  registration Registration @relation(fields: [registrationId], references: [id])
  
  @@map("payments")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  body      String
  variables String // JSON string of variable names used in template
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("email_templates")
}

// UserRole enum replaced with String for compatibility
// Valid values: DELEGATE, COMMITTEE_DIRECTOR, DELEGATE_AFFAIRS, HOSPITALITY_ADMIN, 
// FRONT_DESK_ADMIN, DEV_ADMIN, SOFTWARE_ADMIN, REGISTRATION_ADMIN, 
// ALLOCATION_ADMIN, EXECUTIVE_BOARD, PARTICIPANT

// RegistrationStatus enum replaced with String for compatibility
// Valid values: PENDING, APPROVED, REJECTED, WAITLISTED

// PaymentStatus enum replaced with String for compatibility
// Valid values: PENDING, COMPLETED, FAILED, REFUNDED

// AttendanceStatus enum replaced with String for compatibility
// Valid values: PRESENT, ABSENT, LATE, EXCUSED

model GalleryItem {
  id          String   @id @default(cuid())
  title       String
  type        String   // 'image' or 'video'
  imageUrl    String   // For images: direct image URL, For videos: thumbnail URL
  videoUrl    String?  // For videos: video URL (YouTube, Vimeo, etc.)
  category    String   // 'portraits', 'highlights', 'events', etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery_items")
}